name: Build Docker Image for Changed Services

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [adservice, cartservice, userservice, orderservice, paymentservice]  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build image
      run: docker build -t adservice:latest src/adservice/
    - name: List images
      run: docker image ls
    # - name: Setup python
    #   uses: actions/setup-python@v2
    #   with: 
    #     python-version: '3.11'
    # - name: Install boto3
    #   run: | 
    #     python -m pip install --upgrade pip
    #     pip install boto3
    # - name: Read image tag from DynamoDB
    #   with: 
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #   run: python AWS-Python/get-dynamodb.py
      





    - name: Docker tag
      env: 
        ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        REGION: ${{ secrets.AWS_REGION }}
      run: docker tag adservice:latest $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/image_repo:latest
    - name: Login to ECR
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
    - name: Login to ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
    - name: Push Image
      run: docker push 721699489018.dkr.ecr.eu-west-1.amazonaws.com/image_repo:latest
    - name: red from dynamodb
      run: | 
        output=$(aws dynamodb get-item --table-name adservice_versions --key '{"adservice_version": {"S": "version_number"}}' --region eu-west-1 --query 'Item.value.S' --output text)
        echo "value=$output" >> $GITHUB_ENV
    - name: Use the output in another step
      run: |
        echo "The value from DynamoDB is: $value"


    - name: Increment patch version
      id: increment_patch
      run: |
        echo "Current version: $value" 
        version="$value"
        IFS='.' read -r major minor patch <<< "$version"

        patch=$((patch + 1))

        new_version="$major.$minor.$patch"

        echo "New version: $new_version"

        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Use the incremented patch version
      run: |
        echo "The incremented patch version is: $new_version"
    - name: Update DynamoDB with new version
      run: |
        # Ensure the $new_version is properly expanded within the command
        echo "Updating DynamoDB with new version: $new_version"

        # Update the DynamoDB table with the new version (similar to the example)
        aws dynamodb update-item \
          --table-name adservice_versions \
          --key '{"adservice_version": {"S": "version_number"}}' \
          --attribute-updates '{"value": {"Value": {"S": "'"$new_version"'"}, "Action": "PUT"}}' \
          --return-values UPDATED_NEW \
          --region eu-west-1
  
    
     
